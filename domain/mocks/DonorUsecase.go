// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"

	multipart "mime/multipart"
)

// DonorUsecase is an autogenerated mock type for the DonorUsecase type
type DonorUsecase struct {
	mock.Mock
}

// DonorRegister provides a mock function with given fields: ctx, userId, req
func (_m *DonorUsecase) DonorRegister(ctx context.Context, userId int64, req *domain.RequestRegisterDonor) error {
	ret := _m.Called(ctx, userId, req)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.RequestRegisterDonor) error); ok {
		r0 = rf(ctx, userId, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListAgenda provides a mock function with given fields: ctx, userId
func (_m *DonorUsecase) ListAgenda(ctx context.Context, userId int64) ([]*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRiwayat provides a mock function with given fields: ctx, userId
func (_m *DonorUsecase) ListRiwayat(ctx context.Context, userId int64) ([]*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchedulle provides a mock function with given fields: ctx, unitId
func (_m *DonorUsecase) ListSchedulle(ctx context.Context, unitId int64) ([]*domain.DonorSchedulleDTO, error) {
	ret := _m.Called(ctx, unitId)

	var r0 []*domain.DonorSchedulleDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.DonorSchedulleDTO, error)); ok {
		return rf(ctx, unitId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.DonorSchedulleDTO); ok {
		r0 = rf(ctx, unitId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DonorSchedulleDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, unitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SingleAgenda provides a mock function with given fields: ctx, id
func (_m *DonorUsecase) SingleAgenda(ctx context.Context, id int64) (*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBukti provides a mock function with given fields: ctx, id, file
func (_m *DonorUsecase) UploadBukti(ctx context.Context, id int64, file *multipart.FileHeader) error {
	ret := _m.Called(ctx, id, file)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *multipart.FileHeader) error); ok {
		r0 = rf(ctx, id, file)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadBuktiView provides a mock function with given fields: ctx, id
func (_m *DonorUsecase) UploadBuktiView(ctx context.Context, id int64) (*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDonorUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewDonorUsecase creates a new instance of DonorUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDonorUsecase(t mockConstructorTestingTNewDonorUsecase) *DonorUsecase {
	mock := &DonorUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
