// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// NotificationRepository is an autogenerated mock type for the NotificationRepository type
type NotificationRepository struct {
	mock.Mock
}

// CreateNotification provides a mock function with given fields: ctx, title, msg, userId
func (_m *NotificationRepository) CreateNotification(ctx context.Context, title string, msg string, userId int64) error {
	ret := _m.Called(ctx, title, msg, userId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) error); ok {
		r0 = rf(ctx, title, msg, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetListNotification provides a mock function with given fields: ctx, userId
func (_m *NotificationRepository) GetListNotification(ctx context.Context, userId int64) ([]*domain.NotificationData, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*domain.NotificationData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.NotificationData, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.NotificationData); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.NotificationData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSingleNotification provides a mock function with given fields: ctx, id, userId
func (_m *NotificationRepository) GetSingleNotification(ctx context.Context, id int64, userId int64) (*domain.NotificationData, error) {
	ret := _m.Called(ctx, id, userId)

	var r0 *domain.NotificationData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) (*domain.NotificationData, error)); ok {
		return rf(ctx, id, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) *domain.NotificationData); ok {
		r0 = rf(ctx, id, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.NotificationData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64) error); ok {
		r1 = rf(ctx, id, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNotificationRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewNotificationRepository creates a new instance of NotificationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNotificationRepository(t mockConstructorTestingTNewNotificationRepository) *NotificationRepository {
	mock := &NotificationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
