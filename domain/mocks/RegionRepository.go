// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// RegionRepository is an autogenerated mock type for the RegionRepository type
type RegionRepository struct {
	mock.Mock
}

// GetDistrict provides a mock function with given fields: ctx
func (_m *RegionRepository) GetDistrict(ctx context.Context) ([]*domain.DistrictData, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.DistrictData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.DistrictData, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.DistrictData); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DistrictData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVillage provides a mock function with given fields: ctx, subDistrictId
func (_m *RegionRepository) GetVillage(ctx context.Context, subDistrictId string) ([]*domain.VillageData, error) {
	ret := _m.Called(ctx, subDistrictId)

	var r0 []*domain.VillageData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.VillageData, error)); ok {
		return rf(ctx, subDistrictId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.VillageData); ok {
		r0 = rf(ctx, subDistrictId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.VillageData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subDistrictId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegionRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegionRepository creates a new instance of RegionRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegionRepository(t mockConstructorTestingTNewRegionRepository) *RegionRepository {
	mock := &RegionRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
