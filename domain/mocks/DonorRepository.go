// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/bxcodec/go-clean-arch/domain"
	mock "github.com/stretchr/testify/mock"
)

// DonorRepository is an autogenerated mock type for the DonorRepository type
type DonorRepository struct {
	mock.Mock
}

// CancelDonor provides a mock function with given fields: ctx, id
func (_m *DonorRepository) CancelDonor(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DonorRegister provides a mock function with given fields: ctx, donor
func (_m *DonorRepository) DonorRegister(ctx context.Context, donor *domain.DonorRegister) (int64, error) {
	ret := _m.Called(ctx, donor)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DonorRegister) (int64, error)); ok {
		return rf(ctx, donor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DonorRegister) int64); ok {
		r0 = rf(ctx, donor)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.DonorRegister) error); ok {
		r1 = rf(ctx, donor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DonorRegisterQuestioner provides a mock function with given fields: ctx, donor, donorRegisterId
func (_m *DonorRepository) DonorRegisterQuestioner(ctx context.Context, donor *domain.DonorRegisterQuestioner, donorRegisterId int64) error {
	ret := _m.Called(ctx, donor, donorRegisterId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DonorRegisterQuestioner, int64) error); ok {
		r0 = rf(ctx, donor, donorRegisterId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindSchedule provides a mock function with given fields: ctx, dto
func (_m *DonorRepository) FindSchedule(ctx context.Context, dto *domain.DonorSchedulleDTO) (*domain.DonorSchedulleDTO, error) {
	ret := _m.Called(ctx, dto)

	var r0 *domain.DonorSchedulleDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DonorSchedulleDTO) (*domain.DonorSchedulleDTO, error)); ok {
		return rf(ctx, dto)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.DonorSchedulleDTO) *domain.DonorSchedulleDTO); ok {
		r0 = rf(ctx, dto)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DonorSchedulleDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.DonorSchedulleDTO) error); ok {
		r1 = rf(ctx, dto)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCard provides a mock function with given fields: ctx, userId
func (_m *DonorRepository) GetCard(ctx context.Context, userId int64) (*domain.Card, error) {
	ret := _m.Called(ctx, userId)

	var r0 *domain.Card
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.Card, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.Card); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LastDonorByStatus provides a mock function with given fields: ctx, userId, status
func (_m *DonorRepository) LastDonorByStatus(ctx context.Context, userId int64, status string) (*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, userId, status)

	var r0 *domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgenda provides a mock function with given fields: ctx, userId
func (_m *DonorRepository) ListAgenda(ctx context.Context, userId int64) ([]*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRiwayat provides a mock function with given fields: ctx, userId
func (_m *DonorRepository) ListRiwayat(ctx context.Context, userId int64) ([]*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, userId)

	var r0 []*domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRiwayatByStatus provides a mock function with given fields: ctx, userId, status
func (_m *DonorRepository) ListRiwayatByStatus(ctx context.Context, userId int64, status string) ([]*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, userId, status)

	var r0 []*domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) ([]*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) []*domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchedulle provides a mock function with given fields: ctx, unitId
func (_m *DonorRepository) ListSchedulle(ctx context.Context, unitId int64) ([]*domain.DonorSchedulleDTO, error) {
	ret := _m.Called(ctx, unitId)

	var r0 []*domain.DonorSchedulleDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) ([]*domain.DonorSchedulleDTO, error)); ok {
		return rf(ctx, unitId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*domain.DonorSchedulleDTO); ok {
		r0 = rf(ctx, unitId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.DonorSchedulleDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, unitId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NextDonorByStatus provides a mock function with given fields: ctx, userId, status
func (_m *DonorRepository) NextDonorByStatus(ctx context.Context, userId int64, status string) (*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, userId, status)

	var r0 *domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) (*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, userId, status)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) *domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, userId, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string) error); ok {
		r1 = rf(ctx, userId, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reschedule provides a mock function with given fields: ctx, id, dto
func (_m *DonorRepository) Reschedule(ctx context.Context, id int64, dto *domain.DonorSchedulle) error {
	ret := _m.Called(ctx, id, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, *domain.DonorSchedulle) error); ok {
		r0 = rf(ctx, id, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SingleAgenda provides a mock function with given fields: ctx, id
func (_m *DonorRepository) SingleAgenda(ctx context.Context, id int64) (*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UploadBukti provides a mock function with given fields: ctx, id, path
func (_m *DonorRepository) UploadBukti(ctx context.Context, id int64, path string) error {
	ret := _m.Called(ctx, id, path)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string) error); ok {
		r0 = rf(ctx, id, path)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadBuktiView provides a mock function with given fields: ctx, id
func (_m *DonorRepository) UploadBuktiView(ctx context.Context, id int64) (*domain.DonorRegisterDTO, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.DonorRegisterDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*domain.DonorRegisterDTO, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *domain.DonorRegisterDTO); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.DonorRegisterDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewDonorRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewDonorRepository creates a new instance of DonorRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDonorRepository(t mockConstructorTestingTNewDonorRepository) *DonorRepository {
	mock := &DonorRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
